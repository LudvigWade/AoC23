
import java.io.*;
import java.util.*;

public class Day5Task2 {

	public static void main(String[] args) throws Exception {
		Scanner s = new Scanner(new File("data"));
		Set<Range> seeds = new HashSet<Range>();
		Set<Range> soils = new HashSet<Range>();
		Set<Range> fertilizers = new HashSet<Range>();
		Set<Range> waters = new HashSet<Range>();
		Set<Range> lights = new HashSet<Range>();
		Set<Range> temperatures = new HashSet<Range>();
		Set<Range> humidities = new HashSet<Range>();
		Set<Range> locations = new HashSet<Range>();
		Set<Range> remove = new HashSet<Range>();
		Set<Range> add = new HashSet<Range>();
		Long nbr1,nbr2,nbr3,sum;
		
		while (s.hasNext()) {
			String a = s.next();
			String b = s.next();
			if (a.equals("seeds:")) {
				a = b;
				while (!a.equals("seed-to-soil")) {
					b = s.next();
					seeds.add(new Range(Long.parseLong(a), Long.parseLong(a)+Long.parseLong(b)-1));
					a = s.next();
				}
			}
			System.out.println(seeds.size());
			sum = Long.MAX_VALUE;
			for (Range p : seeds) {
				if (p.start<sum) {
					sum = p.start;
				}
			}
			System.out.println(sum);
			if (a.equals("seed-to-soil")) {
				s.next();
				a = s.next();
				while (!a.equals("soil-to-fertilizer")) {
					nbr1 = Long.parseLong(a);
					nbr2 = s.nextLong();
					nbr3 = s.nextLong();
					nbr3--;
					for (Range p : seeds) {
						if (p.inrange(nbr2, nbr2+nbr3) == 1) {
							soils.add(new Range(nbr1,nbr1+nbr3));
							remove.add(p);
							if (p.start != nbr2 && p.end != nbr2+nbr3) {
								add.add(new Range(p.start,nbr2));
								add.add(new Range(nbr2+nbr3,p.end));
							} else if (p.start == nbr2 && p.end != nbr2+nbr3) {
								add.add(new Range(nbr2+nbr3,p.end));
							} else if (p.start != nbr2 && p.end == nbr2+nbr3) {
								add.add(new Range(p.start,nbr2));
							} else {
								continue;
							}
						} else if (p.inrange(nbr2, nbr2+nbr3) == 2) {
							soils.add(new Range(nbr1,nbr1 + p.end - nbr2));
							remove.add(p);
							add.add(new Range(p.start,nbr2));
						} else if (p.inrange(nbr2, nbr2+nbr3) == 3) {
							soils.add(new Range(nbr1 + p.start - nbr2,nbr1+nbr3));
							remove.add(p);
							add.add(new Range(nbr2+nbr3,p.end));
						} else if (p.inrange(nbr2, nbr2+nbr3) == 4) {
							soils.add(new Range(nbr1 + p.start - nbr2,nbr1 + p.end - nbr2));
							remove.add(p);
						}
					}
					for (Range p : remove) {
						seeds.remove(p);
					}
					for (Range p : add) {
						seeds.add(p);
					}
					remove.clear();
					add.clear();
					a = s.next();
				}
				for (Range p : seeds) {
					soils.add(p);
				}
			}
			System.out.println(soils.size());
			sum = Long.MAX_VALUE;
			for (Range p : soils) {
				if (p.start<sum) {
					sum = p.start;
				}
			}
			System.out.println(sum);
			if (a.equals("soil-to-fertilizer")) {
				s.next();
				a = s.next();
				while (!a.equals("fertilizer-to-water")) {
					nbr1 = Long.parseLong(a);
					nbr2 = s.nextLong();
					nbr3 = s.nextLong();
					nbr3--;
					for (Range p : soils) {
						if (p.inrange(nbr2, nbr2+nbr3) == 1) {
							fertilizers.add(new Range(nbr1,nbr1+nbr3));
							remove.add(p);
							if (p.start != nbr2 && p.end != nbr2+nbr3) {
								add.add(new Range(p.start,nbr2));
								add.add(new Range(nbr2+nbr3,p.end));
							} else if (p.start == nbr2 && p.end != nbr2+nbr3) {
								add.add(new Range(nbr2+nbr3,p.end));
							} else if (p.start != nbr2 && p.end == nbr2+nbr3) {
								add.add(new Range(p.start,nbr2));
							}
						} else if (p.inrange(nbr2, nbr2+nbr3) == 2) {
							fertilizers.add(new Range(nbr1,nbr1 + p.end - nbr2));
							remove.add(p);
							add.add(new Range(p.start,nbr2));
						} else if (p.inrange(nbr2, nbr2+nbr3) == 3) {
							fertilizers.add(new Range(nbr1 + p.start - nbr2,nbr1+nbr3));
							remove.add(p);
							add.add(new Range(nbr2+nbr3,p.end));
						} else if (p.inrange(nbr2, nbr2+nbr3) == 4) {
							fertilizers.add(new Range(nbr1 + p.start - nbr2,nbr1 + p.end - nbr2));
							remove.add(p);
						}
					}
					for (Range p : remove) {
						soils.remove(p);
					}
					for (Range p : add) {
						soils.add(p);
					}
					remove.clear();
					add.clear();
					a = s.next();
				}
				for (Range p : soils) {
					fertilizers.add(p);
				}
			}
			System.out.println(fertilizers.size());
			sum = Long.MAX_VALUE;
			for (Range p : fertilizers) {
				if (p.start<sum) {
					sum = p.start;
				}
			}
			System.out.println(sum);
			if (a.equals("fertilizer-to-water")) {
				s.next();
				a = s.next();
				while (!a.equals("water-to-light")) {
					nbr1 = Long.parseLong(a);
					nbr2 = s.nextLong();
					nbr3 = s.nextLong();
					nbr3--;
					for (Range p : fertilizers) {
						if (p.inrange(nbr2, nbr2+nbr3) == 1) {
							waters.add(new Range(nbr1,nbr1+nbr3));
							remove.add(p);
							if (p.start != nbr2 && p.end != nbr2+nbr3) {
								add.add(new Range(p.start,nbr2));
								add.add(new Range(nbr2+nbr3,p.end));
							} else if (p.start == nbr2 && p.end != nbr2+nbr3) {
								add.add(new Range(nbr2+nbr3,p.end));
							} else if (p.start != nbr2 && p.end == nbr2+nbr3) {
								add.add(new Range(p.start,nbr2));
							} else {
								continue;
							}
						} else if (p.inrange(nbr2, nbr2+nbr3) == 2) {
							waters.add(new Range(nbr1,nbr1 + p.end - nbr2));
							remove.add(p);
							add.add(new Range(p.start,nbr2));
						} else if (p.inrange(nbr2, nbr2+nbr3) == 3) {
							waters.add(new Range(nbr1 + p.start - nbr2,nbr1+nbr3));
							remove.add(p);
							add.add(new Range(nbr2+nbr3,p.end));
						} else if (p.inrange(nbr2, nbr2+nbr3) == 4) {
							waters.add(new Range(nbr1 + p.start - nbr2,nbr1 + p.end - nbr2));
							remove.add(p);
						}
					}
					for (Range p : remove) {
						fertilizers.remove(p);
					}
					for (Range p : add) {
						fertilizers.add(p);
					}
					remove.clear();
					add.clear();
					a = s.next();
				}
				for (Range p : fertilizers) {
					waters.add(p);
				}
			}
			System.out.println(waters.size());
			sum = Long.MAX_VALUE;
			for (Range p : waters) {
				if (p.start<sum) {
					sum = p.start;
				}
			}
			System.out.println(sum);
			if (a.equals("water-to-light")) {
				s.next();
				a = s.next();
				while (!a.equals("light-to-temperature")) {
					nbr1 = Long.parseLong(a);
					nbr2 = s.nextLong();
					nbr3 = s.nextLong();
					nbr3--;
					for (Range p : waters) {
						if (p.inrange(nbr2, nbr2+nbr3) == 1) {
							lights.add(new Range(nbr1,nbr1+nbr3));
							remove.add(p);
							if (p.start != nbr2 && p.end != nbr2+nbr3) {
								add.add(new Range(p.start,nbr2));
								add.add(new Range(nbr2+nbr3,p.end));
							} else if (p.start == nbr2 && p.end != nbr2+nbr3) {
								add.add(new Range(nbr2+nbr3,p.end));
							} else if (p.start != nbr2 && p.end == nbr2+nbr3) {
								add.add(new Range(p.start,nbr2));
							} else {
								continue;
							}
						} else if (p.inrange(nbr2, nbr2+nbr3) == 2) {
							lights.add(new Range(nbr1,nbr1 + p.end - nbr2));
							remove.add(p);
							add.add(new Range(p.start,nbr2));
						} else if (p.inrange(nbr2, nbr2+nbr3) == 3) {
							lights.add(new Range(nbr1 + p.start - nbr2,nbr1+nbr3));
							remove.add(p);
							add.add(new Range(nbr2+nbr3,p.end));
						} else if (p.inrange(nbr2, nbr2+nbr3) == 4) {
							lights.add(new Range(nbr1 + p.start - nbr2,nbr1 + p.end - nbr2));
							remove.add(p);
						}
					}
					for (Range p : remove) {
						waters.remove(p);
					}
					for (Range p : add) {
						waters.add(p);
					}
					remove.clear();
					add.clear();
					a = s.next();
				}
				for (Range p : waters) {
					lights.add(p);
				}
			}
			System.out.println(lights.size());
			sum = Long.MAX_VALUE;
			for (Range p : lights) {
				if (p.start<sum) {
					sum = p.start;
				}
			}
			System.out.println(sum);
			if (a.equals("light-to-temperature")) {
				s.next();
				a = s.next();
				while (!a.equals("temperature-to-humidity")) {
					nbr1 = Long.parseLong(a);
					nbr2 = s.nextLong();
					nbr3 = s.nextLong();
					nbr3--;
					for (Range p : lights) {
						if (p.inrange(nbr2, nbr2+nbr3) == 1) {
							temperatures.add(new Range(nbr1,nbr1+nbr3));
							remove.add(p);
							if (p.start != nbr2 && p.end != nbr2+nbr3) {
								add.add(new Range(p.start,nbr2));
								add.add(new Range(nbr2+nbr3,p.end));
							} else if (p.start == nbr2 && p.end != nbr2+nbr3) {
								add.add(new Range(nbr2+nbr3,p.end));
							} else if (p.start != nbr2 && p.end == nbr2+nbr3) {
								add.add(new Range(p.start,nbr2));
							} else {
								continue;
							}
						} else if (p.inrange(nbr2, nbr2+nbr3) == 2) {
							temperatures.add(new Range(nbr1,nbr1 + p.end - nbr2));
							remove.add(p);
							add.add(new Range(p.start,nbr2));
						} else if (p.inrange(nbr2, nbr2+nbr3) == 3) {
							temperatures.add(new Range(nbr1 + p.start - nbr2,nbr1+nbr3));
							remove.add(p);
							add.add(new Range(nbr2+nbr3,p.end));
						} else if (p.inrange(nbr2, nbr2+nbr3) == 4) {
							temperatures.add(new Range(nbr1 + p.start - nbr2,nbr1 + p.end - nbr2));
							remove.add(p);
						}
					}
					for (Range p : remove) {
						lights.remove(p);
					}
					for (Range p : add) {
						lights.add(p);
					}
					remove.clear();
					add.clear();
					a = s.next();
				}
				for (Range p : lights) {
					temperatures.add(p);
				}
			}
			System.out.println(temperatures.size());
			sum = Long.MAX_VALUE;
			for (Range p : temperatures) {
				if (p.start<sum) {
					sum = p.start;
				}
			}
			System.out.println(sum);
			if (a.equals("temperature-to-humidity")) {
				s.next();
				a = s.next();
				while (!a.equals("humidity-to-location")) {
					nbr1 = Long.parseLong(a);
					nbr2 = s.nextLong();
					nbr3 = s.nextLong();
					nbr3--;
					for (Range p : temperatures) {
						if (p.inrange(nbr2, nbr2+nbr3) == 1) {
							humidities.add(new Range(nbr1,nbr1+nbr3));
							remove.add(p);
							if (p.start != nbr2 && p.end != nbr2+nbr3) {
								add.add(new Range(p.start,nbr2));
								add.add(new Range(nbr2+nbr3,p.end));
							} else if (p.start == nbr2 && p.end != nbr2+nbr3) {
								add.add(new Range(nbr2+nbr3,p.end));
							} else if (p.start != nbr2 && p.end == nbr2+nbr3) {
								add.add(new Range(p.start,nbr2));
							} else {
								continue;
							}
						} else if (p.inrange(nbr2, nbr2+nbr3) == 2) {
							humidities.add(new Range(nbr1,nbr1 + p.end - nbr2));
							remove.add(p);
							add.add(new Range(p.start,nbr2));
						} else if (p.inrange(nbr2, nbr2+nbr3) == 3) {
							humidities.add(new Range(nbr1 + p.start - nbr2,nbr1+nbr3));
							remove.add(p);
							add.add(new Range(nbr2+nbr3,p.end));
						} else if (p.inrange(nbr2, nbr2+nbr3) == 4) {
							humidities.add(new Range(nbr1 + p.start - nbr2,nbr1 + p.end - nbr2));
							remove.add(p);
						}
					}
					for (Range p : remove) {
						temperatures.remove(p);
					}
					for (Range p : add) {
						temperatures.add(p);
					}
					remove.clear();
					add.clear();
					a = s.next();
				}
				for (Range p : temperatures) {
					humidities.add(p);
				}
			}
			System.out.println(humidities.size());
			sum = Long.MAX_VALUE;
			for (Range p : humidities) {
				if (p.start<sum) {
					sum = p.start;
				}
			}
			System.out.println(sum);
			if (a.equals("humidity-to-location")) {
				s.next();
				a = s.next();
				while (s.hasNext()) {
					nbr1 = Long.parseLong(a);
					nbr2 = s.nextLong();
					nbr3 = s.nextLong();
					nbr3--;
					for (Range p : humidities) {
						if (p.inrange(nbr2, nbr2+nbr3) == 1) {
							locations.add(new Range(nbr1,nbr1+nbr3));
							remove.add(p);
							if (p.start != nbr2 && p.end != nbr2+nbr3) {
								add.add(new Range(p.start,nbr2));
								add.add(new Range(nbr2+nbr3,p.end));
							} else if (p.start == nbr2 && p.end != nbr2+nbr3) {
								add.add(new Range(nbr2+nbr3,p.end));
							} else if (p.start != nbr2 && p.end == nbr2+nbr3) {
								add.add(new Range(p.start,nbr2));
							} else {
								continue;
							}
						} else if (p.inrange(nbr2, nbr2+nbr3) == 2) {
							locations.add(new Range(nbr1,nbr1 + p.end - nbr2));
							remove.add(p);
							add.add(new Range(p.start,nbr2));
						} else if (p.inrange(nbr2, nbr2+nbr3) == 3) {
							locations.add(new Range(nbr1 + p.start - nbr2,nbr1+nbr3));
							remove.add(p);
							add.add(new Range(nbr2+nbr3,p.end));
						} else if (p.inrange(nbr2, nbr2+nbr3) == 4) {
							locations.add(new Range(nbr1 + p.start - nbr2,nbr1 + p.end - nbr2));
							remove.add(p);
						}
					}
					for (Range p : remove) {
						humidities.remove(p);
					}
					for (Range p : add) {
						humidities.add(p);
					}
					remove.clear();
					add.clear();
					if (s.hasNext()) {
						a = s.next();
					} else break;
				}
				for (Range p : humidities) {
					locations.add(p);
				}
			}
			System.out.println(locations.size());
			sum = Long.MAX_VALUE;
			for (Range p : locations) {
				if (p.start<sum) {
					sum = p.start;
				}
			}
			System.out.println(sum);
		}
	}
	
	private static class Range {
		private long start;
		private long end;
		
		public Range(long start, long end) throws Exception {
			this.start = start;
			this.end = end;
			if (end < start) {
				throw new Exception();
			}
			if (end < 0 || start < 0) {
				throw new Exception();
			}
		}
		
		public int inrange(long start, long end) {
			if (this.start <= start && this.end >= end) { // Outer or equal
				return 1;
			}
			if (this.start < start && this.end > start) { // Lower
				return 2;
			}
			if (this.end > end && this.start < end) { // Upper
				return 3;
			}
			if (this.start >= start && this.end <= end) { // Inner or equal
				return 4;
			}
			return 0;
		}
		
		@Override
		public boolean equals(Object o) {
			if (this == o) {
				return true;
			}
			
			if (!(o instanceof Range)) {
				return false;
			}
			
			if (this.start == ((Range) o).start && this.end == ((Range) o).end) {
				return true;
			}
			return false;
		}
		
		@Override
		public int hashCode() {
			return (int) (start%65536 + end%256);
		}
	}

}

